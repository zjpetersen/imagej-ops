/*
 * #%L
 * ImageJ software for multidimensional image processing and analysis.
 * %%
 * Copyright (C) 2014 - 2015 Board of Regents of the University of
 * Wisconsin-Madison, University of Konstanz and Brian Northan.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

package net.imagej.ops.geometric3d;

import static org.junit.Assert.assertEquals;

import java.io.IOException;
import java.net.MalformedURLException;

import net.imagej.ops.Ops.Geometric3D.Compactness;
import net.imagej.ops.Ops.Geometric3D.ConvexHullSurfaceArea;
import net.imagej.ops.Ops.Geometric3D.ConvexHullSurfacePixel;
import net.imagej.ops.Ops.Geometric3D.ConvexHullVolume;
import net.imagej.ops.Ops.Geometric3D.Convexity;
import net.imagej.ops.Ops.Geometric3D.MainElongation;
import net.imagej.ops.Ops.Geometric3D.MedianElongation;
import net.imagej.ops.Ops.Geometric3D.Rugosity;
import net.imagej.ops.Ops.Geometric3D.Solidity;
import net.imagej.ops.Ops.Geometric3D.Spareness;
import net.imagej.ops.Ops.Geometric3D.Sphericity;
import net.imagej.ops.Ops.Geometric3D.SurfaceArea;
import net.imagej.ops.Ops.Geometric3D.SurfacePixel;
import net.imagej.ops.Ops.Geometric3D.Volume;
import net.imagej.ops.features.AbstractFeatureTest;
import net.imglib2.roi.labeling.LabelRegion;

import org.junit.Before;
import org.junit.Test;

/**
 * To get comparable values with ImageJ I used the same label as I read in
 * {@link Geometric3DFeaturesTest#createLabelRegion3D()} and did the
 * measurements with the <a href=
 * "http://imagejdocu.tudor.lu/doku.php?id=plugin:stacks:3d_ij_suite:start">3D
 * ImageJ Suite</a>
 * <p>
 * The Convexhull Volume and Surface Area is tested against qhull (qhull.org).
 * As an input for qhull I used the points generated by MarchingCubes.
 * </p>
 * 
 * @author Tim-Oliver Buchholz, University of Konstanz.
 */
public class Geometric3DFeaturesTest extends AbstractFeatureTest {

	private LabelRegion<String> region;

	@Before
	public void createData() {
		try {
			region = createLabelRegion3D();
		}
		catch (final MalformedURLException e) {
			e.printStackTrace();
		}
		catch (final IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Tests the {@link Solidity} Op.
	 */
	@Test
	public void testSolidity() {
		// This test is just here for completeness.
		// All input values of solidity are verified.
		assertEquals(Solidity.NAME, 0.898,
			ops.geometric3d().solidity(region).get(), AbstractFeatureTest.BIG_DELTA);
	}

	/**
	 * Tests the {@link Rugosity} Op.
	 */
	@Test
	public void testRugosity() {
		// This test is just here for completeness.
		// All input values of convexity are verified.
		assertEquals(Rugosity.NAME, 1.064,
			ops.geometric3d().rugosity(region).get(), AbstractFeatureTest.BIG_DELTA);
	}

	/**
	 * Tests the {@link Convexity} Op.
	 */
	@Test
	public void testConvexity() {
		// This test is just here for completeness.
		// All input values of convexity are verified.
		assertEquals(Convexity.NAME, 0.940, ops.geometric3d().convexity(region)
			.get(), AbstractFeatureTest.BIG_DELTA);
	}

	/**
	 * Tests the {@link ConvexHullSurfacePixel} Op.
	 */
	@Test
	public void testConvexHullSurfacePixel() {
		// Verified by hand. qhull merges faces and therefore has another number
		// of surface pixels
		assertEquals(ConvexHullSurfacePixel.NAME, 329, ops.geometric3d()
			.convexHullSurfacePixel(region).get(), AbstractFeatureTest.BIG_DELTA);
	}

	/**
	 * Tests the {@link ConvexHullSurfaceArea} Op.
	 */
	@Test
	public void testConvexHullSurfaceArea() {
		// value taken from qhull (qhull.org)
		assertEquals(ConvexHullSurfaceArea.NAME, 4939.004, ops.geometric3d()
			.convexHullSurfaceArea(region).get(), AbstractFeatureTest.BIG_DELTA);
	}

	/**
	 * Tests the {@link ConvexHullVolume} Op.
	 */
	@Test
	public void testConvexHullVolume() {
		// value taken from qhull (qhull.org)
		assertEquals(ConvexHullVolume.NAME, 30720.458, ops.geometric3d()
			.convexHullVolume(region).get(), AbstractFeatureTest.BIG_DELTA);
	}

	/**
	 * Tests the {@link SurfaceArea} Op.
	 */
	@Test
	public void testSurfaceArea() {
		// value taken from imagej
		// The delta is relatively big because they use float numbers in imagej
		// and my implementation is based on doubles.
		assertEquals(SurfaceArea.NAME, 5255.868, ops.geometric3d().surfaceArea(
			region).get(), 0.186);
	}

	/**
	 * Tests the {@link SurfacePixel} Op.
	 */
	@Test
	public void testSurfacePixel() {
		// value taken from imagej
		assertEquals(SurfacePixel.NAME, 7322, ops.geometric3d().surfacePixel(
			region).get(), AbstractFeatureTest.BIG_DELTA);
	}

	/**
	 * Tests the {@link Volume} Op.
	 */
	@Test
	public void testVolume() {
		// value taken from imagej
		assertEquals(Volume.NAME, 27578, ops.geometric3d().volume(region).get(),
			AbstractFeatureTest.BIG_DELTA);
	}

	/**
	 * Tests the {@link Compactness} Op.
	 */
	@Test
	public void testCompactness() {
		// value taken from imagej
		assertEquals(Compactness.NAME, 0.219, ops.geometric3d().compactness(region)
			.get(), AbstractFeatureTest.BIG_DELTA);
	}

	/**
	 * Tests the {@link Sphericity} Op.
	 */
	@Test
	public void testSphericity() {
		// value taken from imagej
		assertEquals(Sphericity.NAME, 0.603, ops.geometric3d().sphericity(region)
			.get(), AbstractFeatureTest.BIG_DELTA);
	}

	/**
	 * Tests the {@link MainElongation} Op.
	 */
	@Test
	public void testMainElongation() {
		// value taken from imagej
		assertEquals(MainElongation.NAME, 1.305, ops.geometric3d().mainElongation(
			region).get(), AbstractFeatureTest.BIG_DELTA);
	}

	/**
	 * Tests the {@link MedianElongation} Op.
	 */
	@Test
	public void testMedianElongation() {
		// value taken from imagej
		assertEquals(MedianElongation.NAME, 1.137, ops.geometric3d()
			.medianElongation(region).get(), AbstractFeatureTest.BIG_DELTA);
	}

	/**
	 * Tests the {@link Spareness} Op.
	 */
	@Test
	public void testSpareness() {
		// value taken from imagej
		assertEquals(Spareness.NAME, 0.972, ops.geometric3d().spareness(region)
			.get(), AbstractFeatureTest.BIG_DELTA);
	}
}
